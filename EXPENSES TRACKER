 
import os
import pickle
from datetime import datetime

class Transaction:
    def __init__(self, amount, category, transaction_type, date=None):
        self.amount = amount
        self.category = category
        self.transaction_type = transaction_type
        self.date = date if date else datetime.now()

    def __str__(self):
        return f"Amount: {self.amount} - Category: {self.category} - Type: {self.transaction_type} - Date: {self.date}"

class BudgetTracker:
    def __init__(self, filename='transactions.pkl'):
        self.filename = filename
        self.transactions = []
        self.load_transactions()

    def load_transactions(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'rb') as file:
                self.transactions = pickle.load(file)

    def save_transactions(self):
        with open(self.filename, 'wb') as file:
            pickle.dump(self.transactions, file)

    def add_transaction(self, transaction):
        self.transactions.append(transaction)
        self.save_transactions()

    def calculate_budget(self):
        total_income = sum(transaction.amount for transaction in self.transactions if transaction.transaction_type == 'Income')
        total_expense = sum(transaction.amount for transaction in self.transactions if transaction.transaction_type == 'Expense')
        remaining_budget = total_income - total_expense
        return remaining_budget

    def analyze_expenses(self):
        expense_categories = {}
        for transaction in self.transactions:
            if transaction.transaction_type == 'Expense':
                category = transaction.category
                if category in expense_categories:
                    expense_categories[category] += transaction.amount
                else:
                    expense_categories[category] = transaction.amount
        return expense_categories

    def list_transactions(self):
        if self.transactions:
            for transaction in self.transactions:
                print(transaction)
        else:
            print("No transactions found.")

def main():
    budget_tracker = BudgetTracker()

    while True:
        print("\n===== Budget Tracker Menu =====")
        print("1. Add Income")
        print("2. Add Expense")
        print("3. View Remaining Budget")
        print("4. Analyze Expenses")
        print("5. View All Transactions")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            amount = float(input("Enter income amount: "))
            category = input("Enter income category: ")
            budget_tracker.add_transaction(Transaction(amount, category, 'Income'))
            print("Income added successfully.")
        elif choice == '2':
            amount = float(input("Enter expense amount: "))
            category = input("Enter expense category: ")
            budget_tracker.add_transaction(Transaction(amount, category, 'Expense'))
            print("Expense added successfully.")
        elif choice == '3':
            remaining_budget = budget_tracker.calculate_budget()
            print(f"Remaining budget: {remaining_budget}")
        elif choice == '4':
            expense_categories = budget_tracker.analyze_expenses()
            print("\n===== Expense Analysis =====")
            for category, amount in expense_categories.items():
                print(f"{category}: {amount}")
        elif choice == '5':
            print("\n===== All Transactions =====")
            budget_tracker.list_transactions()
        elif choice == '6':
            print("Exiting Budget Tracker. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
 
